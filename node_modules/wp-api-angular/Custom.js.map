{"version":3,"sources":["../src/Custom.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sCAAmD;AACnD,sCAAqC;AAQrC,mCAAuC;AAEvC,qCAAwC;AAUxC;IAA4B,0BAAW;IACrC,gBACS,WAAwB,EACxB,IAAU,EACV,UAAkB;QAH3B,YAKE,kBAAM,WAAW,EAAE,IAAI,CAAC,SACzB;QALQ,iBAAW,GAAX,WAAW,CAAa;QACxB,UAAI,GAAJ,IAAI,CAAM;QACV,gBAAU,GAAV,UAAU,CAAQ;;IAG3B,CAAC;IACD,wBAAO,GAAP,UAAQ,OAAY;QAAZ,wBAAA,EAAA,YAAY;QAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAI,IAAI,CAAC,UAAY,EAAE,OAAO,CAAC,CAAA;IACrD,CAAC;IACD,oBAAG,GAAH,UAAI,QAAgB,EAAE,OAAY;QAAZ,wBAAA,EAAA,YAAY;QAChC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAI,IAAI,CAAC,UAAU,SAAI,QAAU,EAAE,OAAO,CAAC,CAAA;IACjE,CAAC;IACD,uBAAM,GAAN,UAAO,IAAS,EAAE,OAAY;QAAvB,qBAAA,EAAA,SAAS;QAAE,wBAAA,EAAA,YAAY;QAC5B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAI,IAAI,CAAC,UAAY,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;IAC5D,CAAC;IACD,uBAAM,GAAN,UAAO,QAAgB,EAAE,IAAS,EAAE,OAAY;QAAvB,qBAAA,EAAA,SAAS;QAAE,wBAAA,EAAA,YAAY;QAC9C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAI,IAAI,CAAC,UAAU,SAAI,QAAU,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;IACxE,CAAC;IACD,uBAAM,GAAN,UAAO,QAAgB,EAAE,OAAY;QAAZ,wBAAA,EAAA,YAAY;QACnC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAI,IAAI,CAAC,UAAU,SAAI,QAAU,EAAE,OAAO,CAAC,CAAA;IACpE,CAAC;IACH,aAAC;AAAD,CAvBA,AAuBC,CAvB2B,oBAAW,GAuBtC;AAvBY,wBAAM;AA2BnB;IAAiC,+BAAW;IAC1C,qBACS,WAAwB,EACxB,IAAU;QAFnB,YAIE,kBAAM,WAAW,EAAE,IAAI,CAAC,SACzB;QAJQ,iBAAW,GAAX,WAAW,CAAa;QACxB,UAAI,GAAJ,IAAI,CAAM;;IAGnB,CAAC;IAED,iCAAW,GAAX,UAAY,UAAe;QAAf,2BAAA,EAAA,eAAe;QACzB,EAAE,CAAC,CAAC,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC7D,CAAC;IASH,kBAAC;AAAD,CAtBA,AAsBC,CAtBgC,oBAAW;AAcrC,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AAEK,0BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,qBAAW,GAAG;IACrB,EAAC,IAAI,EAAE,WAAI,GAAG;CACb,EAH6F,CAG7F,CAAC;AArBW,kCAAW","file":"Custom.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Http } from '@angular/http';\n\n// Need to import interfaces dependencies\n// Bug TypeScript https://github.com/Microsoft/TypeScript/issues/5938\nimport { Observable } from 'rxjs/Observable';\nimport { RequestOptionsArgs } from '@angular/http/src/interfaces';\nimport { Response } from '@angular/http/src/static_response';\n\nimport { WpApiParent } from './Parent';\n\nimport { WpApiLoader } from './Loaders';\n\nexport interface IWpApiCustom {\n  getList(options?: RequestOptionsArgs): Observable<Response>;\n  get(customId: number, options?: RequestOptionsArgs): Observable<Response>;\n  create(body: any, options?: RequestOptionsArgs): Observable<Response>;\n  update(customId: number, body: any, options?: RequestOptionsArgs): Observable<Response>;\n  delete(customId: number, options?: RequestOptionsArgs): Observable<Response>;\n}\n\nexport class Custom extends WpApiParent implements IWpApiCustom {\n  constructor(\n    public wpApiLoader: WpApiLoader,\n    public http: Http,\n    public entityName: string\n  ) {\n    super(wpApiLoader, http);\n  }\n  getList(options = {}) {\n    return this.httpGet(`/${this.entityName}`, options)\n  }\n  get(customId: number, options = {}) {\n    return this.httpGet(`/${this.entityName}/${customId}`, options)\n  }\n  create(body = {}, options = {}) {\n    return this.httpPost(`/${this.entityName}`, body, options)\n  }\n  update(customId: number, body = {}, options = {}) {\n    return this.httpPost(`/${this.entityName}/${customId}`, body, options)\n  }\n  delete(customId: number, options = {}) {\n    return this.httpDelete(`/${this.entityName}/${customId}`, options)\n  }\n}\n\n\n\nexport class WpApiCustom extends WpApiParent {\n  constructor(\n    public wpApiLoader: WpApiLoader,\n    public http: Http\n  ) {\n    super(wpApiLoader, http);\n  }\n\n  getInstance(entityName = '') {\n    if (typeof entityName !== 'string') {\n      throw new Error(`getInstance needs an entity name`);\n    }\n    return new Custom(this.wpApiLoader, this.http, entityName);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WpApiLoader, },\n{type: Http, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}