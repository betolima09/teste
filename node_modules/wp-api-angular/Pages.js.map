{"version":3,"sources":["../src/Pages.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sCAAmD;AACnD,sCAAqC;AAQrC,mCAAuC;AAEvC,qCAAwC;AAexC;IAAgC,8BAAW;IACzC,oBACS,WAAwB,EACxB,IAAU;QAFnB,YAIE,kBAAM,WAAW,EAAE,IAAI,CAAC,SACzB;QAJQ,iBAAW,GAAX,WAAW,CAAa;QACxB,UAAI,GAAJ,IAAI,CAAM;;IAGnB,CAAC;IAED,4BAAO,GAAP,UAAQ,OAAY;QAAZ,wBAAA,EAAA,YAAY;QAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;IACxC,CAAC;IACD,wBAAG,GAAH,UAAI,MAAc,EAAE,OAAY;QAAZ,wBAAA,EAAA,YAAY;QAC9B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAU,MAAQ,EAAE,OAAO,CAAC,CAAA;IAClD,CAAC;IACD,2BAAM,GAAN,UAAO,IAAS,EAAE,OAAY;QAAvB,qBAAA,EAAA,SAAS;QAAE,wBAAA,EAAA,YAAY;QAC5B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;IAC/C,CAAC;IACD,2BAAM,GAAN,UAAO,MAAc,EAAE,IAAS,EAAE,OAAY;QAAvB,qBAAA,EAAA,SAAS;QAAE,wBAAA,EAAA,YAAY;QAC5C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAU,MAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;IACzD,CAAC;IACD,2BAAM,GAAN,UAAO,MAAc,EAAE,OAAY;QAAZ,wBAAA,EAAA,YAAY;QACjC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,YAAU,MAAQ,EAAE,OAAO,CAAC,CAAA;IACrD,CAAC;IACD,gCAAW,GAAX,UAAY,MAAc,EAAE,OAAY;QAAZ,wBAAA,EAAA,YAAY;QACtC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAU,MAAM,UAAO,EAAE,OAAO,CAAC,CAAA;IACvD,CAAC;IACD,4BAAO,GAAP,UAAQ,MAAc,EAAE,MAAc,EAAE,OAAY;QAAZ,wBAAA,EAAA,YAAY;QAClD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAU,MAAM,cAAS,MAAQ,EAAE,OAAO,CAAC,CAAA;IACjE,CAAC;IACD,oCAAe,GAAf,UAAgB,MAAc,EAAE,OAAY;QAAZ,wBAAA,EAAA,YAAY;QAC1C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAU,MAAM,eAAY,EAAE,OAAO,CAAC,CAAA;IAC5D,CAAC;IACD,gCAAW,GAAX,UAAY,MAAc,EAAE,UAAkB,EAAE,OAAY;QAAZ,wBAAA,EAAA,YAAY;QAC1D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAU,MAAM,mBAAc,UAAY,EAAE,OAAO,CAAC,CAAA;IAC1E,CAAC;IASH,iBAAC;AAAD,CA3CA,AA2CC,CA3C+B,oBAAW;AAmCpC,qBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AAEK,yBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,qBAAW,GAAG;IACrB,EAAC,IAAI,EAAE,WAAI,GAAG;CACb,EAH6F,CAG7F,CAAC;AA1CW,gCAAU","file":"Pages.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Http } from '@angular/http';\n\n// Need to import interfaces dependencies\n// Bug TypeScript https://github.com/Microsoft/TypeScript/issues/5938\nimport { Observable } from 'rxjs/Observable';\nimport { RequestOptionsArgs } from '@angular/http/src/interfaces';\nimport { Response } from '@angular/http/src/static_response';\n\nimport { WpApiParent } from './Parent';\n\nimport { WpApiLoader } from './Loaders';\n\nexport interface IWpApiPages {\n  getList(options?: RequestOptionsArgs): Observable<Response>;\n  get(pageId: number, options?: RequestOptionsArgs): Observable<Response>;\n  create(body: any, options?: RequestOptionsArgs): Observable<Response>;\n  update(pageId: number, body: any, options?: RequestOptionsArgs): Observable<Response>;\n  delete(pageId: number, options?: RequestOptionsArgs): Observable<Response>;\n  getMetaList(pageId: number, options?: RequestOptionsArgs): Observable<Response>;\n  getMeta(pageId: number, metaId: number, options?: RequestOptionsArgs): Observable<Response>;\n  getRevisionList(pageId: number, options?: RequestOptionsArgs): Observable<Response>;\n  getRevision(pageId: number, revisionId: number, options?: RequestOptionsArgs): Observable<Response>;\n}\n\n\nexport class WpApiPages extends WpApiParent implements IWpApiPages {\n  constructor(\n    public wpApiLoader: WpApiLoader,\n    public http: Http\n  ) {\n    super(wpApiLoader, http);\n  }\n\n  getList(options = {}) {\n    return this.httpGet(`/pages`, options)\n  }\n  get(pageId: number, options = {}) {\n    return this.httpGet(`/pages/${pageId}`, options)\n  }\n  create(body = {}, options = {}) {\n    return this.httpPost(`/pages`, body, options)\n  }\n  update(pageId: number, body = {}, options = {}) {\n    return this.httpPost(`/pages/${pageId}`, body, options)\n  }\n  delete(pageId: number, options = {}) {\n    return this.httpDelete(`/pages/${pageId}`, options)\n  }\n  getMetaList(pageId: number, options = {}) {\n    return this.httpGet(`/pages/${pageId}/meta`, options)\n  }\n  getMeta(pageId: number, metaId: number, options = {}) {\n    return this.httpGet(`/pages/${pageId}/meta/${metaId}`, options)\n  }\n  getRevisionList(pageId: number, options = {}) {\n    return this.httpGet(`/pages/${pageId}/revisions`, options)\n  }\n  getRevision(pageId: number, revisionId: number, options = {}) {\n    return this.httpGet(`/pages/${pageId}/revisions/${revisionId}`, options)\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WpApiLoader, },\n{type: Http, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}