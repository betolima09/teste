{"version":3,"sources":["../src/Terms.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sCAAmD;AACnD,sCAAqC;AAQrC,mCAAuC;AAEvC,qCAAwC;AAUxC,IAAM,eAAA,GAAkB,YAAA,CAAa;AAGrC;IAAgC,8BAAW;IACzC,oBACS,WAAwB,EACxB,IAAU;QAFnB,YAIE,kBAAM,WAAW,EAAE,IAAI,CAAC,SACzB;QAJQ,iBAAW,GAAX,WAAW,CAAa;QACxB,UAAI,GAAJ,IAAI,CAAM;;IAGnB,CAAC;IACD,4BAAO,GAAP,UAAQ,cAAgC,EAAG,OAAY;QAA/C,+BAAA,EAAA,gCAAgC;QAAG,wBAAA,EAAA,YAAY;QACrD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAI,cAAgB,EAAE,OAAO,CAAC,CAAA;IACpD,CAAC;IACD,wBAAG,GAAH,UAAI,cAAgC,EAAE,MAAc,EAAE,OAAY;QAA9D,+BAAA,EAAA,gCAAgC;QAAkB,wBAAA,EAAA,YAAY;QAChE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAI,cAAc,SAAI,MAAQ,EAAE,OAAO,CAAC,CAAA;IAC9D,CAAC;IACD,2BAAM,GAAN,UAAO,cAAgC,EAAE,IAAS,EAAE,OAAY;QAAzD,+BAAA,EAAA,gCAAgC;QAAE,qBAAA,EAAA,SAAS;QAAE,wBAAA,EAAA,YAAY;QAC9D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAI,cAAgB,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;IAC3D,CAAC;IACD,2BAAM,GAAN,UAAO,cAAgC,EAAE,MAAc,EAAE,IAAS,EAAE,OAAY;QAAzE,+BAAA,EAAA,gCAAgC;QAAkB,qBAAA,EAAA,SAAS;QAAE,wBAAA,EAAA,YAAY;QAC9E,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAI,cAAc,SAAI,MAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;IACrE,CAAC;IACD,2BAAM,GAAN,UAAO,cAAgC,EAAE,MAAc,EAAE,OAAY;QAA9D,+BAAA,EAAA,gCAAgC;QAAkB,wBAAA,EAAA,YAAY;QACnE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAI,cAAc,SAAI,MAAQ,EAAE,OAAO,CAAC,CAAA;IACjE,CAAC;IASH,iBAAC;AAAD,CA9BA,AA8BC,CA9B+B,oBAAW;AAsBpC,qBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AAEK,yBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,qBAAW,GAAG;IACrB,EAAC,IAAI,EAAE,WAAI,GAAG;CACb,EAH6F,CAG7F,CAAC;AA7BW,gCAAU","file":"Terms.js","sourceRoot":"","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Http } from '@angular/http';\n\n// Need to import interfaces dependencies\n// Bug TypeScript https://github.com/Microsoft/TypeScript/issues/5938\nimport { Observable } from 'rxjs/Observable';\nimport { RequestOptionsArgs } from '@angular/http/src/interfaces';\nimport { Response } from '@angular/http/src/static_response';\n\nimport { WpApiParent } from './Parent';\n\nimport { WpApiLoader } from './Loaders';\n\nexport interface IWpApiTerms {\n  getList(taxonomiesType: string, options?: RequestOptionsArgs): Observable<Response>;\n  get(taxonomiesType: string, termId: number, options?: RequestOptionsArgs): Observable<Response>;\n  create(taxonomiesType: string, body: any, options?: RequestOptionsArgs): Observable<Response>;\n  update(taxonomiesType: string, termId: number, body: any, options?: RequestOptionsArgs): Observable<Response>;\n  delete(taxonomiesType: string, termId: number, options?: RequestOptionsArgs): Observable<Response>;\n}\n\nconst defaultTaxoType = 'categories';\n\n\nexport class WpApiTerms extends WpApiParent implements IWpApiTerms {\n  constructor(\n    public wpApiLoader: WpApiLoader,\n    public http: Http\n  ) {\n    super(wpApiLoader, http);\n  }\n  getList(taxonomiesType = defaultTaxoType , options = {}) {\n    return this.httpGet(`/${taxonomiesType}`, options)\n  }\n  get(taxonomiesType = defaultTaxoType, termId: number, options = {}) {\n    return this.httpGet(`/${taxonomiesType}/${termId}`, options)\n  }\n  create(taxonomiesType = defaultTaxoType, body = {}, options = {}) {\n    return this.httpPost(`/${taxonomiesType}`, body, options)\n  }\n  update(taxonomiesType = defaultTaxoType, termId: number, body = {}, options = {}) {\n    return this.httpPost(`/${taxonomiesType}/${termId}`, body, options)\n  }\n  delete(taxonomiesType = defaultTaxoType, termId: number, options = {}) {\n    return this.httpDelete(`/${taxonomiesType}/${termId}`, options)\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WpApiLoader, },\n{type: Http, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}